buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
}

plugins {
    id 'java-library'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            property 'mixin.env.disable', 'true'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://modmaven.dev/"
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
        }
    }
    maven {
        url = "https://maven.tterrag.com"
        content {
            includeGroup "com.tterrag.registrate"
        }
    }
    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel.cloth"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.4.0"
    compileOnly fg.deobf("com.simibubi.create:create-1.20.1:0.5.1.j-55:slim") { transitive = false }
    compileOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.20.1:0.6.11-13")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.3")
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    api fg.deobf("me.shedaniel.cloth:cloth-config-forge:11.1.136")
    compileOnly fg.deobf("curse.maven:create-diesel-generators-869316:5401010")
    compileOnly fg.deobf("curse.maven:create-industry-693815:5811638")
    compileOnly fg.deobf("curse.maven:createaddition-439890:6084982")
    compileOnly fg.deobf("blank:Warium-1.0.7:1.0.7")
    compileOnly fg.deobf("blank:WariumVS-0.0.10:0.0.10")
}

mixin {
    add sourceSets.main, 'mixins.warium_create.refmap.json'
    config 'mixins.warium_create.json'

    debug.verbose = true
    debug.export = true
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:-removal"]
}

tasks.register('copyModJar', Copy) {
    dependsOn build
    from("$buildDir/libs/") {
        include '*.jar'
    }
    into 'D:/ModrinthApp/profiles/tacz_only/mods'
}

build.finalizedBy(copyModJar)