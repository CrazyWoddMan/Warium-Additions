plugins {
    id 'java-library'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.modrinth.minotaur' version '2.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            property 'mixin.env.disable', 'true'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://modmaven.dev/"
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
        }
    }
    maven {
        url = "https://maven.tterrag.com"
        content {
            includeGroup "com.tterrag.registrate"
        }
    }
    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel.cloth"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://maven.fallenbreath.me/releases"
        content {
            includeGroup "me.fallenbreath"
        }
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.4.0"
    compileOnly fg.deobf("com.simibubi.create:create-1.20.1:0.5.1.j-55:slim") { transitive = false }
    compileOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.20.1:0.6.11-13")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.3")
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    jarJar(group: 'me.fallenbreath', name: 'conditional-mixin-forge', version: '[0.6.4]')
    implementation fg.deobf("me.fallenbreath:conditional-mixin-forge:0.6.4")
    api fg.deobf("me.shedaniel.cloth:cloth-config-forge:11.1.136")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.20.0.112")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.20.0.112")
    compileOnly fg.deobf("dev.latvian.mods:kubejs-forge:2001.6.5-build.16")
    compileOnly fg.deobf("curse.maven:ponder-622888:5584244")
    compileOnly fg.deobf("curse.maven:create-diesel-generators-869316:5401010")
    compileOnly fg.deobf("curse.maven:create-industry-693815:5811638")
    compileOnly fg.deobf("curse.maven:createaddition-439890:6084982")
    implementation fg.deobf("blank:Warium-1.1.2:1.1.2")
    compileOnly fg.deobf("blank:WariumVS-0.0.12:0.0.12")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.20.0.112")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.20.0.112")
    compileOnly fg.deobf("curse.maven:supplementaries-412082:6228530")
    compileOnly fg.deobf("curse.maven:immersive-engineering-231951:6206989")
}

mixin {
    add sourceSets.main, mod_id + '.mixins.refmap.json'
    config mod_id + '.mixins.json'

    debug.verbose = true
    debug.export = true
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = mod_id
    versionName = mod_name + " " + version
    versionType = "release"
    uploadFile = jar
    gameVersions = [minecraft_version]
    dependencies {
        required.project "warium"
        required.version "create", "1.20.1-0.5.1.j"
        optional.project "cloth-config"
        optional.project "valkyrien-warium"
        optional.project "coloredwater"
        optional.version "supplementaries", "1.20-3.1.18"
        optional.version "create-tfmg", "0.9.3-1.20.1"
        optional.version "createaddition", "1.20.1-1.2.5"
        optional.version "create-diesel-generators", "1.20.1-1.2i"
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, credits: credits, mod_description: mod_description, tests_directory: tests_directory,
            warium_version_range: warium_version_range, create_version_range: create_version_range,
            immersiveengineering_version_range: immersiveengineering_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jarJar.enable()

tasks.named('jar', Jar).configure {
    dependsOn 'cleanLibs'
    
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:-removal"]
}

tasks.register('cleanLibs', Delete) {
    delete fileTree(dir: "$buildDir/libs", include: '*.jar')
}

tasks.register('copyModJar', Copy) {
    dependsOn build
    from("$buildDir/libs/") {
        include '*-all.jar'
    }
    into tests_directory
    onlyIf {
        file(tests_directory).exists()
    }
}

build.finalizedBy(copyModJar)